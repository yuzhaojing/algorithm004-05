package com.geek.lee.leetcode.easy;

/**
 *  给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 
 *  
 *   不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 
 *  
 *   示例 1: 
 *  
 *   给定数组 nums = [1,1,2], 
 *  
 *  函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 
 *  
 *  你不需要考虑数组中超出新长度后面的元素。 
 *  
 *   示例 2: 
 *  
 *   给定 nums = [0,0,1,1,1,2,2,3,3,4],
 *  
 *  函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
 *  
 *  你不需要考虑数组中超出新长度后面的元素。
 *   
 *  
 *   说明: 
 *  
 *   为什么返回数值是整数，但输出的答案是数组呢? 
 *  
 *   请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 
 *  
 *   你可以想象内部操作如下: 
 *  
 *     nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
 *  int len = removeDuplicates(nums);
 *  
 *    在函数里修改输入数组对于调用者是可见的。
 *    根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
 *  for (int i = 0; i < len; i++) {
 *      print(nums[i]);
 *  }
 *   
 *   Related Topics 数组 双指针
 */

/**
 * 删除排序数组中的重复元素
 */
public class RemoveDuplicates26 {

    public int removeDuplicates(int[] nums) {

        /**
         * 前提条件:
         *  1.数组是排序好的.
         *  2.原地删除(意味着空间复杂度是O(1), 不能开辟额外存储空间)
         *  基于以上两个前提条件, 可以考虑通过指针来玩这件事儿.
         *  既然是删除重复元素, 肯定涉及到比较.如何比较?谁与谁比较?比较到什么时候结束?
         *  想清楚这几个问题, 自然就可以解决这个问题了
         */
        // 边界判断
        if (null == nums || nums.length == 0) {
            return 0;
        }
        // 如果只有一个元素,也就没有排序的必要了.
        if (nums.length == 1) {
            return 1;
        }
        // 初始指针.
        int i = 0;
        for (int j = 1; j < nums.length; j ++) {
            /*
            如何比较?
                通过两个指针,获取指针所指向的数组元素,对获取的到数组元素进行比较
            谁与谁比较?
                指针所指向的数组元素.
            比较到什么时候结束(终止条件)?
                遍历结束.
             */
//            if (nums[i] != nums[j]) {
//                i ++;
//                // 此种方法,如果元素都不相等,此处操作原地复制, 没有必要. 考虑优化.
//                nums[i] = nums[j];
//            }

            // 对上面原地复制优化方式
            if (nums[i] != nums[j]) {
                if (j - i > 1) {
                    nums[i + 1] = nums[j];
                }
                i ++;
            }
        }

        return ++ i;
    }

    public static void main(String[] args) {
        System.out.println(new RemoveDuplicates26().removeDuplicates(new int[]{1,1,2,2,4,5,6,7,7}));

    }
}
