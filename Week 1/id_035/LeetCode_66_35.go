package id_035
/*
	给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

	最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

	你可以假设除了整数 0 之外，这个整数不会以零开头。

	示例 1:

	输入: [1,2,3]
	输出: [1,2,4]
	解释: 输入数组表示数字 123。
	示例 2:

	输入: [4,3,2,1]
	输出: [4,3,2,2]
	解释: 输入数组表示数字 4321。
*/

/*
	思路1:判断是否会进位
	如果不会进位、直接数组最后一位+1即可
	如果会进位则需要将当前位置为0、上一位加1
*/
func plusOne(digits []int) []int {
	for i := len(digits) - 1; i >= 0; i-- {
		// +1 然后对10取余(当前位元素有可能是9，所以取余步骤不能少)
		digits[i]=(digits[i] + 1) % 10
		// 当前位在加1之后对10取余不为0直接返回即可
		if digits[i] % 10 != 0 {
			return digits
		}
	}
	// 只有99,999,9999...才会执行下列语句
	datas := make([]int, len(digits))
	return append([]int{1}, datas...)
}