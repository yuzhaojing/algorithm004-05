package id_035

/*
	给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释:
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]

说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的 原地 算法。
*/

/*
	思路1:暴力破解

	每次遍历数组、都将每个数向后移一位、执行k次遍历
	时间复杂度O(n^k)
*/
func rotate(nums []int, k int) {
	for i := 1; i <= k; i++ {
		temp := nums[len(nums) - 1]
		for j := len(nums) - 1; j > 0; j-- {
			nums[j] = nums[j - 1]
		}
		nums[0] = temp
	}
}

/*
	思路2:反转
	先反转所有元素
	然后反转前k个元素、再反转后面len(nums)-k个元素
	时间复杂度:O(n)
*/

func rotate2(nums []int, k int) {
	k %= len(nums)	// 注意:这一行非常重要,因为k是不受数组长度约束的、如果不做些处理、会产生越界
	_reserve(nums)
	_reserve(nums[:k])
	_reserve(nums[k:])
}

// 反转数组
// 位置交换、第一个和最后一个、第二个和倒数第二个...
func _reserve(nums []int) {
	for i := 0; i < len(nums) / 2; i++ {
		nums[i], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[i]
	}
}